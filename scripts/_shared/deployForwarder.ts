import {ethers} from "hardhat";
import {CallForwarder__factory, DeployFactory__factory} from "../../types";
import {DEPLOY_FACTORY} from "./addresses";
import {keccak256} from "ethers/lib/utils";

/**
export FACTORY="0x16c4Dc0f662E2bEceC91fC5E7aeeC6a25684698A"
export CALLER="0x16c4Dc0f662E2bEceC91fC5E7aeeC6a25684698A"
export INIT_CODE_HASH="0x800c91cb77f48acac95e2f8fa5bcc201492e56114eeedf360962b1a4dd540524"
export GPU_DEVICE=255
export ADDRESS_START_WITH="fca11"
export ADDRESS_END_WITH="01"
cargo run --release $FACTORY $CALLER $INIT_CODE_HASH $GPU_DEVICE $ADDRESS_START_WITH $ADDRESS_END_WITH
 */

// 0x16c4dc0f662e2becec91fc5e7aeec6a25684698ae4231e242c5edf00c3a0096c => 0xfCa1154C643C32638AEe9a43eeE7f377f515c801

async function main() {
    const accounts = await ethers.getSigners();
    const operator = accounts[1];
    const chainId = await operator.getChainId();
    console.log("operator", operator.address, "on", chainId);

    const gp = await operator.getGasPrice();

    console.log("gasPrice", gp.toNumber() / 1e9);

    console.log("Get deploy factory");

    const salt = "0x16c4dc0f662e2becec91fc5e7aeec6a25684698ae4231e242c5edf00c3a0096c";
    //  deploys to 0xfCa1154C643C32638AEe9a43eeE7f377f515c801
    const bytecode =
        "0x6080604052348015600f57600080fd5b5061108d8061001f6000396000f3fe6080604052600436106100225760003560e01c80636a0c90ff1461002e57600080fd5b3661002957005b600080fd5b61004161003c366004610fa9565b610043565b005b604460243581013361005681848461005d565b5050505050565b60018201913560f81c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810161009d576100968361012c565b92506100da565b602181036100af57610096838561025d565b604081036100c15761009683856103f8565b609081036100d2576100968361046f565b6100da6104af565b8183106100e757506100ed565b5061005d565b80821115610127576040517f8129bbcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000813560601c6e22d473030f116ddee9f6b43ac78ba38103610173577fee90c4680000000000000000000000000000000000000000000000000000000060005260046000fd5b6026830192601481013560801c906024013560f01c6f80000000000000000000000000000000821680156101a9574792506101be565b6effffffffffffffffffffffffffffff831692505b506040517f23b872dd0000000000000000000000000000000000000000000000000000000086357fffffffff000000000000000000000000000000000000000000000000000000001603610236577fee90c4680000000000000000000000000000000000000000000000000000000060005260046000fd5b81868237600080838386885af1610251573d6000803e3d6000fd5b50939093019392505050565b600080600080853560601c6e22d473030f116ddee9f6b43ac78ba381036102a8577fee90c4680000000000000000000000000000000000000000000000000000000060005260046000fd5b6026870196601481013560801c906024013560f01c6f80000000000000000000000000000000821680156102de574792506102f3565b6effffffffffffffffffffffffffffff831692505b506040517f23b872dd000000000000000000000000000000000000000000000000000000008a357fffffffff00000000000000000000000000000000000000000000000000000000160361036b577fee90c4680000000000000000000000000000000000000000000000000000000060005260046000fd5b818a8237600080838386885af1965050808901985050505085358060f81c925083158315161561039f573d6000803e3d6000fd5b8060e81c61ffff16915050600386019550826103e65780156103d75760006103c7828861101d565b90506103d486888361005d565b95505b816001036103e157005b6103eb565b948501945b8593505050505b92915050565b60018201916000903560f81c8061041b5761041384846104d9565b9150506103f2565b6001810361042c57610413846105a3565b6003810361043d5761041384610758565b6004810361044f5761041384846108b9565b600581036104605761041384610974565b6104686104af565b5092915050565b60018101906000903560f81c806104905761048983610a34565b9392505050565b600a81036104a15761048983610d86565b6104a96104af565b50919050565b7f398d4d320000000000000000000000000000000000000000000000000000000060005260046000fd5b6000823560601c601484013560601c602885013560801c8061052e577f70a0823100000000000000000000000000000000000000000000000000000000600052846004526020600060246000865afa50506000515b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081528560048201528260248201528160448201526020816064836000885af193503d92506001815114601f841116831517841661059357826000803e826000fd5b5050506038939093019392505050565b6000813560601c601483013560601c60198401358060801c60ff16816fffffffffffffffffffffffffffffffff1691506000841560008114610667578280156105ee57849250610623565b47925084831015610623577f7dd37f700000000000000000000000000000000000000000000000000000000060005260046000fd5b5081156106625760008060008085895af1610662577ff4b3b1bc0000000000000000000000000000000000000000000000000000000060005260046000fd5b610747565b828015610676578492506106e1565b7f70a08231000000000000000000000000000000000000000000000000000000006000523060045260206000602460008a5afa506000519250848310156106e1577f7dd37f700000000000000000000000000000000000000000000000000000000060005260046000fd5b508115610747576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815285600482015282602482015260208160448360008b5af13d6001835114601f821116811517821661074357806000803e806000fd5b5050505b505050603994909401949350505050565b60008135606090811c906014840135901c60198401356effffffffffffffffffffffffffffff81169060801c60ff168481801561079757839150610802565b7f70a0823100000000000000000000000000000000000000000000000000000000600052306004526020600060246000895afa50600051915083821015610802577f7dd37f700000000000000000000000000000000000000000000000000000000060005260046000fd5b5080156108a9577f2e1a7d4d00000000000000000000000000000000000000000000000000000000600052806004526000806024600080895af161086a577ff4b3b1bc0000000000000000000000000000000000000000000000000000000060005260046000fd5b3084146108a95760008060008084885af16108a9577ff4b3b1bc0000000000000000000000000000000000000000000000000000000060005260046000fd5b5050506039939093019392505050565b6000823560601c601484013560601c602885013560801c8061090e577f70a0823100000000000000000000000000000000000000000000000000000000600052846004526020600060246000865afa50506000515b6040517f36c7851600000000000000000000000000000000000000000000000000000000815285600482015282602482015281604482015283606482015260008060848360006e22d473030f116ddee9f6b43ac78ba35af1610593573d6000803e3d6000fd5b6000813560601c601483013560601c816000527f1aae13105d9b6581c36534caba5708726e5ea1e03175e823c989a5756966d1f360205260406000206020528060005260406000208054610a26576040517f095ea7b30000000000000000000000000000000000000000000000000000000081528260048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201526020816044836000885af15050600181555b505050602891909101919050565b6000610a80565b8060005260046000fd5b7f70a0823100000000000000000000000000000000000000000000000000000000600052306004526020600060246000845afa505060005190565b8135606090811c90608584013560f090811c91608786013590911c90850135608090811c7fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffff811691600091607489013590911c9082906f800000000000000000000000000000001647851560018114610b3f57828015610b04578588019650610b08565b8596505b5081861115610b3a57610b3a7f1101129400000000000000000000000000000000000000000000000000000000610a3b565b610b94565b828015610b53578583039750829650610b92565b610b5c8b610a45565b975085965082871115610b9257610b927f1101129400000000000000000000000000000000000000000000000000000000610a3b565b505b505050633b9aca0060708a013560e01c633b9aca0003850204905060405196507fcbef2aa90000000000000000000000000000000000000000000000000000000087526080600488015281602488015260006044880152604c89013560601c6064880152602889013560e01c6084880152602c89013560a48801528360c48801528060e4880152505060e061010486015260009150821560018114610c3e578015610c4857610c7d565b6101209250610c7d565b6020840460208506600080821160018114610c6557839150610c6c565b6001840191505b506001810160200260e00195505050505b50816101248601526000841560018114610cc9576020860460208706600080821160018114610cae57839150610cb5565b6001840191505b506001810160200287019450505050610cd0565b6020840191505b50610144860181905261016486018481528415610cf457848660898b010160208301375b50918501608401848152918415610d1057846089890160208501375b60009250850160849081019088013560f81c1560018114610d435760208252600060208301528660408301039350610d50565b6000825286602083010393505b505081850160405260008083878460148c013560601c5af1610d76573d6000803e3d6000fd5b5050930190920160890192915050565b6000602882013560601c605c83013560801c7fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffff8116906f800000000000000000000000000000001660a485013560f01c84831560018114610e22578315610e1d5747851115610e19577f110112940000000000000000000000000000000000000000000000000000000060005260046000fd5b8491505b610e70565b838015610e3457479550859250610e6e565b7f70a08231000000000000000000000000000000000000000000000000000000006000523060045260206000602460008a5afa5060005195505b505b50633b9aca0063ffffffff607c89013560e01c16633b9aca000385020492506040517fad5425c6000000000000000000000000000000000000000000000000000000008152601488013560601c600482015260848801356024820152856044820152603c88013560648201528460848201528360a482015263ffffffff608089013560e01c1660c4820152600060e48201524261010482015261070842016101248201526000610144820152610180610164820152826101848201526000831160018114610f62576000806101a484868d3560601c5af1610f55573d6000803e3d6000fd5b6101a48201604052610f97565b8360a68a016101a4840137600080856101a40184868d3560601c5af1610f8c573d6000803e3d6000fd5b836101c40182016040525b5050509490940160a601949350505050565b60008060208385031215610fbc57600080fd5b823567ffffffffffffffff811115610fd357600080fd5b8301601f81018513610fe457600080fd5b803567ffffffffffffffff811115610ffb57600080fd5b85602082840101111561100d57600080fd5b6020919091019590945092505050565b808201808211156103f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122021d28696657d93c349ed233a7c6bafcef32931b636afa407b313d033a3b16bbe64736f6c634300081c0033";

    const initCode = keccak256(bytecode);
    console.log("initCode", initCode); // 0x6d95759de5f9c1ff23720012281168c1b9cdc928be6790a9eb2efdc32bad0980 (paris, 1m steps)

    const deployFactory = await new DeployFactory__factory(operator).attach(DEPLOY_FACTORY);
    const address = await deployFactory.computeAddress(salt, initCode);
    console.log("address", address);
    const estimate = await deployFactory.estimateGas.deploy(salt, bytecode);
    console.log("estimate", estimate);
    const tx = await deployFactory.deploy(salt, bytecode, {gasLimit: estimate.add(100), gasPrice: gp});
    await tx.wait();

    console.log("deployed expected to", address);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
